SCHEDULER dissertation_active_probing_non_redundant;

VAR probingIntervallRttMultiplier = 5; /* Tuning parameter */

VAR sbfCandidates = SUBFLOWS.FILTER(sbf => !sbf.THROTTLED AND sbf.CWND > sbf.SKBS_IN_FLIGHT + sbf.QUEUED AND !sbf.LOSSY); 

IF(sbfCandidates.EMPTY) { RETURN; } 

IF (!RQ.EMPTY) {
  VAR sbfCandidate = sbfCandidates.FILTER(sbf =>
    sbf.HAS_WINDOW_FOR(RQ.TOP) AND
    !RQ.TOP.SENT_ON(sbf)).MIN(sbf => sbf.RTT);
  IF (sbfCandidate != NULL) {
    sbfCandidate.PUSH(RQ.POP());
    RETURN;
  }
}

IF (!Q.EMPTY) {
    /* End of a burst ? */
    IF(Q.COUNT == 1 AND Q.TOP.PSH) { 
      VAR sbfsToProbe = sbfCandidates.FILTER(sbf => sbf.USER < CURRENT_TIME_MS);
      IF (!sbfsToProbe.EMPTY) {
          VAR packetToSend = Q.TOP; 
          DROP(Q.POP());
          FOREACH(VAR sbf IN sbfsToProbe) {
            /* Send redundant packet and reset subflow probing timeout */
            sbf.PUSH(packetToSend);
            sbf.SET_USER(CURRENT_TIME_MS + sbf.RTT * probingIntervallRttMultiplier);
          }
      }
    }

    /* Schedule as usual. There is at least one subflow */ 
    VAR bestSbf = sbfCandidates.MIN(sbf => sbf.RTT); 
    bestSbf.PUSH(Q.POP()); 

    /* Reset subflow probing timeout */ 
    bestSbf.SET_USER(CURRENT_TIME_MS + bestSbf.RTT * probingIntervallRttMultiplier); 
}