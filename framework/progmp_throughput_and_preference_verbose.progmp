SCHEDULER dissertation_throughput_and_preference_aware;

PRINT("R4 = %u", R4);

FOREACH (VAR sbf IN SUBFLOWS) {
    PRINT("sbfId = %u", sbf.ID);
    PRINT("RTT = %u", sbf.RTT_MS);
    PRINT("CWND = %u", sbf.CWND);
}

VAR sbfCandidates = SUBFLOWS.FILTER(sbf => sbf.CWND > sbf.SKBS_IN_FLIGHT + sbf.QUEUED 
    AND !sbf.THROTTLED AND !sbf.LOSSY);
    
IF(sbfCandidates.EMPTY) { RETURN; }

IF (!RQ.EMPTY) { 
    VAR sbfCandidate = sbfCandidates.FILTER(sbf => sbf.HAS_WINDOW_FOR(RQ.TOP) 
        AND !RQ.TOP.SENT_ON(sbf)).MIN(sbf => sbf.RTT); 
    IF (sbfCandidate != NULL) { 
        sbfCandidate.PUSH(RQ.POP()); 
        RETURN; 
    } 
} 

VAR targetBwKB = R1;
VAR prefAhead = R4;
VAR factor = 100;
VAR maxAhead = 100 * factor;

/* We emulate non-preferred subflows with subflow IDs > 1, thus, the preferred sbf has ID == 1 */

VAR prefS = sbfCandidates.FILTER(s=> s.ID == 1).MIN(s=>s.RTT);

IF (prefS != NULL) {
    IF(!prefS.THROTTLED) {
        prefS.PUSH(Q.POP());
        IF (R4 < maxAhead) {
            SET(R4, R4 + factor); 
        } 
	}
} ELSE {
    /* be carefull with the integer aritmethic */
    VAR mss = 1400;
    VAR packetsPerSec = (1000 * prefS.CWND) / prefS.RTT_MS;
    PRINT("packets per sec %u", packetsPerSec);
    VAR capKB = (packetsPerSec * mss) / 1024;
    PRINT("capacity in KB %u", capKB);
    VAR ratio = factor * capKB / (targetBwKB - capKB);
    IF (prefAhead > ratio AND capKB < targetBwKB) {
        sbfCandidates.FILTER(s => !s.THROTTLED).MIN(s => s.RTT).PUSH(Q.POP());
        SET(R4, prefAhead - ratio); 
	} 
}