SCHEDULER dissertation_redundant_opportunistic;

VAR sbfCandidates = SUBFLOWS.FILTER(sbf => !sbf.THROTTLED AND 
  sbf.CWND > sbf.SKBS_IN_FLIGHT + sbf.QUEUED AND !sbf.LOSSY);

IF (sbfCandidates.EMPTY) {
  RETURN;
}

IF (!RQ.EMPTY) {
  VAR sbfCandidate = SUBFLOWS.FILTER(sbf => 
    sbf.HAS_WINDOW_FOR(RQ.TOP) AND 
    !RQ.TOP.SENT_ON(sbf)).MIN(sbf => sbf.RTT);
  IF (sbfCandidate != NULL) {
    sbfCandidate.PUSH(RQ.POP());
    RETURN;
  }
}

/* we are sure that there is at least one subflow */
IF(!Q.EMPTY) {
  FOREACH(VAR sbf IN sbfCandidates) {
    sbf.PUSH(Q.TOP);
  }
  DROP(Q.POP());
}